一.索引的常见类型：
    1.哈希表：由于其内部是无序的所以，在进行范围查找的时候速度很慢，哈希表适合等值查找
    2.有序数组：在进行范围查找和等值查找的时候性能都很优秀，但在做插入的时候效率低下
    3.二叉搜索树：查询和更新的时候性能都不错，但前提是保存二叉树平衡，另外由于二叉搜索树是存储的时候是按照数据块来存储的，如果一个树高为h的二叉搜索树，其想要找到某个值，可能需要h次磁盘io，而磁盘io的
    效率是很低下的，所以实际上采用的是n叉树(b+树)，n则由数据块大小决定。
    4.为什么mysql不使用b树：a.b+树在内部节点不包含数据信息，所以在内存可以存放更多的key，数据存放更紧密，具有更好的空间局部性，访问叶子节点上关联的数据页有更好的缓存命中b.b+树的叶子节点相连
    因此对整棵树的遍历只需要一次线性遍历叶子节点。
二.InnoDB的索引模型
    1.InnoDB中表根据主键顺序以索引的形式存放，这种存储方式称为索引组织表，每个索引在InnoDB中都对应一颗B+树
    2.聚簇索引：主键索引，叶节点存放的是整行的数据
    3.非主键索引(二级索引):其叶节点2的内容是主键的值
    4.回表和索引覆盖
        a.回表：通过非主键索引的查询到对应的主键值，然后通过主键值，去主键索引找到对应的数据(一次查询，实际走了两颗树)
        b.覆盖索引:使用非主键索引的时候，如果在查询的时候索引已经覆盖了我们的查询需求，就不需要回表了，减少了查询次数
    5.页分裂和页合并：B+树为了维护索引的有序性，在插入新值时，会进行必要的维护，如果数据页没满，可能需要移动数据页的数据，来将新值插入对应的点，如果页已经满了则需要申请新数据，将原本的部分数据移动过去，
    这个过程叫页分裂；同样，当进行删除数据时，有可能由于空间利用率很低，会将数据页做合并
    6.自增主键以及其优势：自增主键即自增列上定义的主键，在插入时不指定ID的值，系统会获得当前ID最大值加1作为下一条记录的ID值；其优势在于由于是自增主键，所以在插入的时候聚簇索引都是追加操作，
    不涉及其他记录，不会触发叶子节点的分裂，而查用业务字段做主键，往往不能保证有序插入，写数据成本高；另外自增主键占用空间小，由于每个非主键索引的页节点都是主键值，所以自增主键可以节约空间
    7.什么时候可以考虑使用业务字段做主键：a.只有一个索引。b.索引为唯一索引
    8.最左前缀原则：对于联合索引，其索引内节点大小是按照联合索引的字典序来进行比较的
    9.索引下推：在不使用索引下推的情况下，使用非主键索引，存储引擎在查到数据后，返回给mysql服务器，由服务器判断是否符合条件；
    使用索引下推情况下，如果存在某些被索引的列的判断条件时，mysql服务器将这部分判断条件传递给存储引擎，有存储引擎判断索引是否符合mysql服务器传递的条件，只有当符合条件时，才将将数据检索出来返回给服务器
