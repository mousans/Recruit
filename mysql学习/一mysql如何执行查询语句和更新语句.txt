一.mysql的基础框架：
  server层+存储引擎层

    1.server层：连接器，查询缓存，分析器，优化器，执行器（实现mysql的内置函数，以及所有跨存储引擎的功能 example：触发器，视图内聚函数等）

        a.连接器：负责跟客户端建立连接，获取权限，维持和管理连接；在客户端和服务器端tpc握手后，连接器通过密码和用户名验证权限，如果不对则客户端收到错误，停止执行，
        如果密码通过则继续对器对应账户的权限验证。当连接后面长时间(默认八小时)没有操作的时候，连接器就会自动断开连接，节约服务端的资源，如果客户端在断开后发送请求，会收到一个错误提醒
        由于建立连接需要tcp连接等复杂的过程，所以一般采用长连接(但如果数据库长连接过多会占用服务器的资源，主要是内存，因为连接对象是放在内存中的)

        b.查询缓存：查询语句执行后的结果会以key(查询语句)--value(查询结果)的形式保存在查询缓存中，当下一次同样的查询语句执行时，可以直接返回结果，
        但缺点为只要数据库的表有更新，该表对应的所有查询缓存都会失效，这样查询缓存的命中结果会非常低(mysql8.0后查询缓存直接被删除)

        c.分析器：词法分析(识别将要执行的sql语句都有说明字符串，都代表什么意思,是否合法)-->语法分析(判断将要执行sql语句是否满足sql语法)

        d.优化器：决定某些具体的执行路径(有多个索引时决定使用哪一个索引，多表连接的时候，决定表的连接顺序等)

        e.执行器：调用存储引擎层的接口，执行sql语句

        f:binlog(归档日志):记录了语句的原始逻辑(给ID=2的这行c字段+1)无限大
    
    2.存储引擎层：redolog+undolog
        a.redolog：大小固定的循环队列 记录的是在某个数据页做了说明修改 将随机IO(每次语句更新数据)变为顺序IO(将要进行的更新写入redolog中)
        WAL(Write-Ahead- Logging)技术:先写日志再写磁盘---当一条记录需要更新时，Innodb先将记录写道redolog内，并更新内存，此时，更新完成；当Innodb空闲时，会将redolog的修改更新到磁盘

    3.mysql执行update语句的两阶段提交(binlog和redolog的内容需要在无论何时宕机后不发生冲突)：写入redolog 处于prepare阶段-->写binlog->提交事务commit