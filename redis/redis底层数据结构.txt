一.键值数据库的最外层结构:哈希表,redis使用了一个哈希表(全局哈希表)来保存所有的键值对,其好处在于O(1)的查找速度
    1.解决哈希冲突的办法:redis采用链式hash的办法来解决hash冲突,即同一个hash桶内多个元素采用一个链表来保存,元素之间
    采用指针连接,这个链表叫哈希冲突链
    2.rehash:当元素很多的时候,必须要增加全局哈希表上桶的数量,rehash就是增加其数量的过程
        具体操作:
            redis默认使用两个全局hash表,hash表1和hash表2,在开始使用的时候默认使用hash表1,随着数据增多,redis开始rehash过程:
            a.给hash表2更大的空间,例如两倍当前哈希表1的大小
            b.将当前hash表1中的数据重新映射并拷贝到hash表2中
            c.释放hash表1的空间
        说明:b步骤中涉及大量的数据拷贝,如果一次性把hash表的数据迁移完,会造成redis线程阻塞,无法服务其他请求.所以redis更新了rehash操作改为渐进式rehash
        渐进式rehash:在拷贝数据的时候,redis正常处理客户端请求，每处理一个请求时,除了请求之外,从hash表1中的第一个索引位置开始,将其对应的所有entries重新
        映射到hash表2中,另外redis内部有个定时任务在不断执行rehash
二.redis相关value操作:
    1.string类(底层实现为简单动态字符串):对于string类只要在全局hash表中找到就可以直接进行O(1)的增删改查了
    2.集合类:
        a.集合类的底层数据结构:整数数组,双向链表,哈希表,压缩列表,跳表
            a.1.压缩列表:其目的在于压缩数组,节省内存,开头有zlbytes,zltail,zllen,分别表示列表的长度,尾部的偏移量,以及列表的元素个数,列表的尾部则为zlend
            表示列表结尾,在查询列表头尾的时候都可以直接查询O(1),在查询其他元素时,则只能顺序查找,时间复杂度为O(N)
            a.2.调表:调表在链表的基础上增加了多级索引,通过索引位置的几个跳转,实现对数据的快速定位,比较像二分查找
        b.redis数据结构和底层数据结构的映射:
            List:双向链表+压缩列表
            hash:压缩列表+哈希表
            有序集合:压缩列表+跳表
            集合:整数数组+哈希表
    3.redis数据接口使用的复杂度:
        1.单元素操作是基础:
        2.范围查找非常耗时:
        3.统计操作通常非常高效；
        4.例外请况只有几个
