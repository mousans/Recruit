一.redis主从同步解决的问题:数据持久化解决了redis数据丢失的问题,但如果只有一个节点,一旦redis宕机,则redis无法对外提供服务,
所以,需要一种集群的模式来解决服务中断的问题,即一个节点宕机后,其他节点顶上,继续服务,主从同步是其中的一种模式
二.redis主从同步的实现思路:主库,从库保存多份数据,主库提供读写服务,从库提供读服务,一旦主库上有数据更新,主库会将操作同步到从库
三.为什么采用读写分离模式(为什么只能主库来提供写服务):如果从库也能接受客户端的写请求,最直接的问题就是如何保证所有数据被正确
有序的更新,如果采用读写分离的模式,至少主库上的数据是正确的,之后就是主库将消息传递给从库
四.主从库同步的过程:
    1.主从库第一次同步(从库使用replicaof 主库IP 6379命令和主库同步):
        a.主从库建立连接,协商同步,为全量复制做准备,从库主库间建立连接,并告诉主库即将开始同步,主库回复确认后,主从库开始同步
        b.主库将所有数据同步给从库,从库收到数据后,在本地完成数据加载，过程依赖于内存快照生成的RDB文件;具体而言,主库执行bgsave
        命令,生成RDB文件,接着将文件发送给从库,从库收到文件后清空当前数据库,加载RDB文件
        c.由于生成RDB文件期间有可能有新的写请求,产生数据更改主库为了让从库保存和主库一样的数据,会在内存中用一个专门的
        replication buffer记录RDB文件生成后收到的所有写操作，第三个阶段就是将buffer中的指令发送给从库,
        从库重新执行操作,主库从库就实现了同步
五.主库同步压力:每一次的全量复制都涉及RDB文件生成和RDB文件传输,如果从库很多,都跟主库进行全量复制的话,主库会忙于for子进程
生成RDB文件,进行数据同步从而导致主线程处理redis请求变慢,其解决办法是采用主-从-从模式,在部署集群时,用某个从库去级联其他从
库,这样从库在进行数据同步的时候就不用和主库交互,减轻主库压力
六.主从库之间网络连接断开的恢复方法:当主库从库之间的连接断开后,前面的replication buffer就断开连接了,主库会将所有的写操作都写入环形repl_backlog_buffer
,当从库,主库重新连接的时候,从库会将自己之前在repl_backlog_buffer读到的位置发给主库,主库将位置之后的命令转移到从库对应的replication buffer,从而将
命令发送过去,完成同步
**注意:如果从库对应的replication buffer过大,主库会主动断开和从库的连接,此时，主从复制也会中断,如果后面从库再次发起复制请求,可能会恶性循环,引发复制风暴
