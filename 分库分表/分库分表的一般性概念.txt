一.垂直切分:
    1.垂直分库：根据耦合性,将关联度低的表划分为不同的数据库
    2.垂直分表：将一个表的根据冷热字段拆分为不同表,提高数据库性能
    3.优缺点:
        a.优点:解决业务层面的耦合，使业务清晰,也因此能对不同业务的数据进行分级管理维护;在高并发的请况下,垂直切分一定程度
        上提高了IO,数据库连接数，单机硬件资源的瓶颈
        b.缺点:分库后无法join,只能通过接口聚合方式解决;依然存在单表数据量过大的问题;分库后分布式事务处理复杂
二.水平切分:
    1.水平分库:单库的qps过高(单机的QPS只能达到1000左右)，数据库来不及响应。
    2.水平分表:单表数据过多(超过1000万)
    3.水平切分的优缺点:
        a.优点:不存在单库数据量过大,高并发的瓶颈,提高了系统的稳定性和负载能力;应用端更改很小,不需要拆分业务模块
        b.缺点:数据多次扩展难度和维护量很大;跨分片的事务一致性难以保障
    4.水平分表的规则:
        a.hash取模分表:将数据的某一项hash取模,得到其写入的表
            优点:数据分片较为平均，不容易出现热点和并发访问瓶颈
            缺点:后期分片集群扩容时,需要对旧数据进行迁移;容易面临跨分片查询的复杂问题
        b.数值range分表:根据数据某项属性的范围来进行分表
            优点:单表大小可控;方便分片集群扩容，使用分片字段进行范围查找时,可以快速查询
            缺点:热点数据成为瓶颈
        c.一致性hash算发分表:一致性hash算法可以很好的解决分片集群扩容的问题
三.分库分表带来的问题:
    1.分布式事务问题:通过分布式中间件解决
    2.跨节点关联查询join的问题:
        a.全局表:系统中所有模块可能都依赖一些表,为了避免跨库的Join查询,可以将这种表在每个数据都保留一份
        b.字段冗余:保存冗余
        c.系统层面分两次查询,第一次查询关联数据的ID，第二次请求关联数据,进行拼接
    3.跨节点分页排序函数问题:现在不同节点对数据进行排序返回,返回后将结果集汇总排序,返回给用户
    4.全局主键避重问题:
        如果都用主键自增肯定不合理，如果用UUID那么无法做到根据主键排序，所以我们可以考虑通过雪花ID来作为数据库的主键，
    5.数据迁移问题:采用双写方式:所有修改代码(增删改查)都在新库中实现,再在老库中定义一个抽取数据服务，不断写数据到新库